{"title":"iOS 手势UIGesTureRecognier详解","date":"2019-03-29T10:05:06.000Z","slug":"iOS-手势UIGesTureRecognier详解","updated":"2019-04-02T14:48:46.921Z","content":"<p>一. 手势UIGestureRecognier简介</p>\n<p>iOS 3.2之后，苹果推出了手势识别功能（Gesture Recognizer），在触摸事件处理方面，大大简化了开发者的开发难度。利用UIGestureRecognizer，能轻松识别用户在某个view上面做的一些常见手势。UIGestureRecognizer是一个抽象类，对iOS中的事件传递机制面向应用进行封装，将手势消息的传递抽象为了对象。其中定义了所有手势的基本行为，使用它的子类才能处理具体的手势。</p>\n<a id=\"more\"></a>\n<p>二. 手势的抽象类——UIGestureRecognizer</p>\n<p>UIGestureRecognizer将一些和手势操作相关的方法抽象了出来，但它本身并不实现什么手势，因此，在开发中，我们一般不会直接使用UIGestureRecognizer的对象，而是通过其子类进行实例化，iOS系统给我们提供了许多用于实例的子类，这些我们后面再说，我们先来看一下，UIGestureRecognizer中抽象出了哪些方法。</p>\n<ol>\n<li><p>初始化方法<br>UIGestureRecognizer类为其子类准备好了一个统一的初始化方法，无论什么样的手势动作，其执行的结果都是一样的：触发一个方法，可以使用下面的方法进行统一的初始化：</p>\n<pre><code>- (instancetype)initWithTarget:(nullable id)target action:(nullable SEL)action\n</code></pre></li>\n</ol>\n<p>当然，如果我们使用alloc-init的方式，也是可以的，下面的方法可以为手势添加触发的selector：</p>\n<pre><code>- (void)addTarget:(id)target action:(SEL)action;\n</code></pre><p>与之相对应的，我们也可以将一个selector从其手势对象上移除：</p>\n<pre><code>- (void)removeTarget:(nullable id)target action:(nullable SEL)action;\n</code></pre><p>因为addTarget方式的存在，iOS系统允许一个手势对象可以添加多个selector触发方法，并且触发的时候，所有添加的selector都会被执行，我们以点击手势示例如下：</p>\n<pre><code>- (void)viewDidLoad {\n[super viewDidLoad];\nUITapGestureRecognizer *tap1 = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(tap1:)];\n    [tap1 addTarget:self action:@selector(tap2:)];\n    [self.view addGestureRecognizer:tap1];\n}\n-(void)tap1:(UITapGestureRecognizer *)tap\n{\n    NSLog(@&quot;%s&quot;,__func__);\n}\n-(void)tap2:(UITapGestureRecognizer *)tap\n{\n    NSLog(@&quot;%s&quot;,__func__);\n}\n</code></pre><p>点击屏幕，打印内容如下，说明两个方法都触发了</p>\n<ol start=\"2\">\n<li><p>手势状态<br>UIgestureRecognizer类中有如下一个属性，里面枚举了一些手势的当前状态:</p>\n<pre><code>@property(nonatomic,readonly) UIGestureRecognizerState state;\n</code></pre></li>\n</ol>\n<p>枚举值如下：</p>\n<pre><code>typedef NS_ENUM(NSInteger, UIGestureRecognizerState) {\n    UIGestureRecognizerStatePossible,   // 默认的状态，这个时候的手势并没有具体的情形状态\n    UIGestureRecognizerStateBegan,      // 手势开始被识别的状态\n    UIGestureRecognizerStateChanged,    // 手势识别发生改变的状态\n    UIGestureRecognizerStateEnded,      // 手势识别结束，将会执行触发的方法\n    UIGestureRecognizerStateCancelled,  // 手势识别取消\n    UIGestureRecognizerStateFailed,     // 识别失败，方法将不会被调用\n    UIGestureRecognizerStateRecognized = UIGestureRecognizerStateEnded \n};\n</code></pre><ol start=\"3\">\n<li><p>常用属性和方法</p>\n<pre><code>//手势代理 代理中有一些手势触发的方法，后面拿出来详细说明\n@property(nullable,nonatomic,weak) id &lt;UIGestureRecognizerDelegate&gt; delegate; \n//设置手势是否有效\n@property(nonatomic, getter=isEnabled) BOOL enabled;  \n//获取手势所在的View\n@property(nullable, nonatomic,readonly) UIView *view;          \n//默认是YES。当识别到手势的时候，终止touchesCancelled:withEvent:或pressesCancelled:withEvent:发送的所有触摸事件。\n@property(nonatomic) BOOL cancelsTouchesInView;     \n//默认为NO ,在触摸开始的时候，就会发消息给事件传递链，如果设置为YES，在触摸没有被识别失败前，都不会给事件传递链发送消息。  \n@property(nonatomic) BOOL delaysTouchesBegan;    \n//默认为YES 。这个属性设置手势识别结束后，是立刻发送touchesEnded或pressesEnded消息到事件传递链或者等待一个很短的时间后，如果没有接收到新的手势识别任务，再发送。\n@property(nonatomic) BOOL delaysTouchesEnded;         \n\n@property(nonatomic, copy) NSArray&lt;NSNumber *&gt; *allowedTouchTypes NS_AVAILABLE_IOS(9_0); // Array of UITouchType&apos;s as NSNumbers.\n@property(nonatomic, copy) NSArray&lt;NSNumber *&gt; *allowedPressTypes NS_AVAILABLE_IOS(9_0); // Array of UIPressTypes as NSNumbers.\n\n//[A requireGestureRecognizerToFail：B]手势互斥 它可以指定当A手势发生时，即便A已经滿足条件了，也不会立刻触发，会等到指定的手势B确定失败之后才触发。\n- (void)requireGestureRecognizerToFail:(UIGestureRecognizer *)otherGestureRecognizer;\n//获取当前触摸的点\n- (CGPoint)locationInView:(nullable UIView*)view;\n//设置触摸点数\n- (NSUInteger)numberOfTouches;\n//获取某一个触摸点的触摸位置\n- (CGPoint)locationOfTouch:(NSUInteger)touchIndex inView:(nullable UIView*)view; \n</code></pre></li>\n</ol>\n<p>3.1 个别属性详解<br>其中几个BOOL值的属性，对于手势触发的控制也十分重要，下面我们举个栗子来详细说明一下以下三个方法。</p>\n<pre><code>@property(nonatomic) BOOL cancelsTouchesInView;\n@property(nonatomic) BOOL delaysTouchesBegan;\n@property(nonatomic) BOOL delaysTouchesEnded;\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    UIPanGestureRecognizer *pan = [[UIPanGestureRecognizer alloc]initWithTarget:self action:@selector(pan:)];\n    pan.cancelsTouchesInView = NO;\n    //    pan.delaysTouchesBegan = YES;\n    [self.view addGestureRecognizer:pan];    \n}\n-(void)touchesMoved:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event\n{\n    NSLog(@&quot;touchMoved手势触发&quot;);\n}\n-(void)pan:(UIPanGestureRecognizer *)pan{\n    NSLog(@&quot;pan手势触发&quot;);\n}\n</code></pre><p>pan.cancelsTouchesInView属性默认设置为YES，如果识别到了手势，系统将会发送touchesCancelled:withEvent:消息在其时间传递链上，终止触摸事件的传递，也就是说默认当识别到手势时，touch事件传递的方法将被终止而不执行，如果设置为NO，touch事件传递的方法仍然会被执行，上例中我们使用了拖拽手势和touchesMoved两个触发方式，当我们把cancelTouchesInView设置为NO时，在屏幕上滑动，两种方式都在触发</p>\n<p>因为此时在拖拽手势识别失败之前，都不会给时间传递链发送消息，所以就不会在调用touchesMoved触发事件了<br>而delaysTouchesEnded属性默认是YES，当设为YES时在手势识别结束后，会等待一个很短的时间，如果没有接收到新的手势识别任务，才会发送touchesEnded消息到事件传递链，设置为NO之后会立刻发送touchesEnded消息到事件传递链我们同样来看一个例子：</p>\n<pre><code>- (void)viewDidLoad {\n    [super viewDidLoad];\n    UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(tap:)];\n    tap.numberOfTapsRequired = 3;\n    // tap.cancelsTouchesInView = NO;\n    // tap.delaysTouchesBegan = YES;\n    tap.delaysTouchesEnded = NO;\n    [self.view addGestureRecognizer:tap];    \n}\n-(void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event{\n    NSLog(@&quot;touchBegan手势开始&quot;);\n}\n-(void)touchesEnded:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event\n{\n    NSLog(@&quot;touchEnd手势触发结束&quot;);\n}\n-(void)tap:(UITapGestureRecognizer *)tap\n{\n    NSLog(@&quot;tap手势触发&quot;);\n}\n</code></pre><p>3.2 重点方法详解-手势间的互斥处理<br>同一个View上是可以添加多个手势对象的，默认这些手势是互斥的，一个手势触发了就会默认屏蔽其他相似的手势动作。比如，单击和双击并存时，如果不做处理，它就只能发送出单击的消息。为了能够识别出双击手势，就需要用下面的方法一个特殊处理逻辑，即先判断手势是否是双击，在双击失效的情况下作为单击手势处理。</p>\n<pre><code>- (void)requireGestureRecognizerToFail:(UIGestureRecognizer *)otherGestureRecognizer;\n</code></pre><p>[A requireGestureRecognizerToFail：B] 它可以指定当A手势发生时，即便A已经滿足条件了，也不会立刻触发，会等到指定的手势B确定失败之后才触发。<br>看一个例子</p>\n<pre><code>- (void)viewDidLoad {\n    [super viewDidLoad];\n    UITapGestureRecognizer *tap1 = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(tap1:)];\n    tap1.numberOfTapsRequired = 1;\n    [self.view addGestureRecognizer:tap1];\n    UITapGestureRecognizer *tap2 = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(tap2:)];\n    tap2.numberOfTapsRequired = 2;\n    [self.view addGestureRecognizer:tap2];  \n    //当tap2手势触发失败时才会触发tap1手势\n    [tap1 requireGestureRecognizerToFail:tap2];\n}\n-(void)tap1:(UITapGestureRecognizer *)tap\n{\n    NSLog(@&quot;tap1手势触发&quot;);\n}\n-(void)tap2:(UITapGestureRecognizer *)tap\n{\n    NSLog(@&quot;tap2手势触发&quot;);\n}\n</code></pre><p>3.3. UIGestureRecognizerDelegate<br>前面我们提到过关于手势对象的协议代理，通过代理的回调，我们可以进行自定义手势，也可以处理一些复杂的手势关系，其中方法如下：</p>\n<pre><code>//手指触摸屏幕后回调的方法，返回NO则不再进行手势识别，方法触发等\n- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch;\n//开始进行手势识别时调用的方法，返回NO则结束，不再触发手势\n- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer *)gestureRecognizer;\n//是否支持多时候触发，返回YES，则可以多个手势一起触发方法，返回NO则为互斥\n- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer;\n//下面这个两个方法也是用来控制手势的互斥执行的\n//这个方法返回YES，第一个手势和第二个互斥时，第一个会失效\n- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRequireFailureOfGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer NS_AVAILABLE_IOS(7_0);\n//这个方法返回YES，第一个和第二个互斥时，第二个会失效\n- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldBeRequiredToFailByGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer NS_AVAILABLE_IOS(7_0);\n</code></pre><p>三. UIGestureRecognizer子类及子类属性<br>除了UIGestureRecognizer中的方法和属性是所有子类通用的之外，UIGestureRecognizer子类中分别有不同的属性和方法来对应不同的手势。</p>\n<ol>\n<li><p>点击手势——UITapGestureRecognizer<br>点击手势十分简单，支持单击和多次点击，在我们手指触摸屏幕并抬起手指时会进行触发，其中有如下两个属性我们可以进行设置：</p>\n<pre><code>//设置点击次数，默认为单击\n@property (nonatomic) NSUInteger  numberOfTapsRequired; \n//设置同时点击的手指数\n@property (nonatomic) NSUInteger  numberOfTouchesRequired;\n</code></pre></li>\n<li><p>捏合手势——UIPinchGestureRecognizer<br>捏合手势是当我们双指捏合和扩张会触发动作的手势，我们可以设置的属性如下：</p>\n<pre><code>//设置缩放比例\n@property (nonatomic)          CGFloat scale; \n//设置捏合速度\n@property (nonatomic,readonly) CGFloat velocity;\n</code></pre></li>\n<li><p>拖拽手势——UIPanGestureRecognzer<br>当我们点中视图进行慢速拖拽时会触发拖拽手势的方法。</p>\n<pre><code>//设置触发拖拽的最少触摸点，默认为1\n@property (nonatomic)          NSUInteger minimumNumberOfTouches; \n//设置触发拖拽的最多触摸点\n@property (nonatomic)          NSUInteger maximumNumberOfTouches;  \n//获取当前位置\n- (CGPoint)translationInView:(nullable UIView *)view;            \n//设置当前位置\n- (void)setTranslation:(CGPoint)translation inView:(nullable UIView *)view;\n//设置拖拽速度\n- (CGPoint)velocityInView:(nullable UIView *)view;\n</code></pre></li>\n<li><p>滑动手势——UISwipeGestureRecognizer<br>滑动手势和拖拽手势的不同之处在于滑动手势更快，而拖拽比较慢。</p>\n<pre><code>//设置触发滑动手势的触摸点数\n@property(nonatomic) NSUInteger                        numberOfTouchesRequired; \n//设置滑动方向\n@property(nonatomic) UISwipeGestureRecognizerDirection direction;  \n//枚举如下\ntypedef NS_OPTIONS(NSUInteger, UISwipeGestureRecognizerDirection) {\n    UISwipeGestureRecognizerDirectionRight = 1 &lt;&lt; 0,\n    UISwipeGestureRecognizerDirectionLeft  = 1 &lt;&lt; 1,\n    UISwipeGestureRecognizerDirectionUp    = 1 &lt;&lt; 2,\n    UISwipeGestureRecognizerDirectionDown  = 1 &lt;&lt; 3\n};\n</code></pre></li>\n<li><p>旋转手势——UIRotationGestureRecognizer<br>进行旋转动作时触发手势方法。</p>\n<pre><code>//设置旋转角度\n@property (nonatomic)          CGFloat rotation;\n//设置旋转速度 \n@property (nonatomic,readonly) CGFloat velocity;\n</code></pre></li>\n<li><p>长按手势——UILongPressGestureRecognizer<br>进行长按的时候触发的手势方法。</p>\n<pre><code>//设置触发前的点击次数\n@property (nonatomic) NSUInteger numberOfTapsRequired;    \n//设置触发的触摸点数\n@property (nonatomic) NSUInteger numberOfTouchesRequired; \n//设置最短的长按时间\n@property (nonatomic) CFTimeInterval minimumPressDuration; \n//设置在按触时时允许移动的最大距离 默认为10像素\n@property (nonatomic) CGFloat allowableMovement;\n</code></pre></li>\n<li><p>自定义手势<br>自定义手势继承：UIGestureRecognizer，实现下面的方法，在以下方法中判断自定义手势是否实现。</p>\n<pre><code>– touchesBegan:withEvent:  \n– touchesMoved:withEvent:  \n– touchesEnded:withEvent:  \n- touchesCancelled:withEvent: \n</code></pre></li>\n</ol>\n<p>注意.m文件中需要引入#import &lt;UIKit/UIGestureRecognizerSubclass.h&gt;。</p>\n<p>关于iOS-UITouch事件处理过程可以看这篇文章<a href=\"https://www.jianshu.com/p/ef60a6c10a8d\" target=\"_blank\" rel=\"noopener\">iOS-UITouch事件处理详解</a></p>\n","prev":{"title":"iOS中求出UILabel中文字的行数以及每一行的内容","slug":"iOS中求出UILabel中文字的行数以及每一行的内容"},"next":{"title":"hexo 多终端同步博客","slug":"hexo-多终端同步博客"},"link":"http://yoursite.com/post/iOS-手势UIGesTureRecognier详解/"}