{"per_page":10,"total":2,"current":2,"data":[{"title":"iOS关于富文本字符串","date":"2019-03-29T01:37:22.000Z","excerpt":"<p>首先要创建一个带有属性的字符串NSMutableAttributedString</p>\n<pre><code>NSMutableAttributedString *attrString = [[NSMutableAttributedString alloc] initWithString:@&quot;这是一个富文本字符串&quot;]; \n/* 其他几种创建方法\n- (instancetype)initWithString:(NSString *)str;\n- (instancetype)initWithString:(NSString *)str attributes:(nullable NSDictionary&lt;NSString *, id&gt; *)attrs;\n- (instancetype)initWithAttributedString:(NSAttributedString *)attrStr;\n*/\n</code></pre>","slug":"iOS关于富文本字符串"},{"title":"iOS中NSUserDefaults详解","date":"2019-03-28T10:38:51.000Z","excerpt":"<p>关于NSUserDefaults官方文档<br><a href=\"https://developer.apple.com/reference/foundation/userdefaults\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/reference/foundation/userdefaults</a></p>\n<p>一:NSUserDefaults是什么，有什么用处<br>对于应用来说，每个用户都有自己的独特偏好设置，而好的应用会让用户根据喜好选择合适的使用方式，把这些偏好记录在应用包的plist文件中，通过NSUserDefaults类来访问，这是NSUserDefaults的常用姿势。如果有一些设置你希望用户即使升级后还可以继续使用，比如玩游戏时得过的最高分、喜好和通知设置、主题颜色甚至一个用户头像，那么你可以使用NSUserDefaults来存储这些信息，如果有更多需求，可以了解数据持久化相关的知识。<br>具体来说NSUserDefaults是iOS系统提供的一个单例类(iOS提供了若干个单例类)，通过类方法standardUserDefaults可以获取NSUserDefaults单例。如：<br>NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];</p>","slug":"iOS中NSUserDefaults详解"},{"title":"IQKeyboardManager框架详解","date":"2019-03-28T10:38:09.000Z","excerpt":"<p>每一个iOS应用的开发者在工作中都会遇到需要用户键盘输入数据的需求，而输入框(UITextField/UITextView)的父界面可能是普通的UIView，也可能是UIScrollView，UITableView，UICollectionView 等。而如果输入框位于屏幕的底部，弹起的键盘很可能覆盖输入框，导致用户就看不到输入结果，体验较差。</p>\n<p>那么这篇博客主要就是要介绍IQKeyboardManager框架的详细使用,使用IQKeyboardManager可以很容易地解决弹起键盘遮盖输入框的问题，并且易于集成，不需要侵入性地继承特定的类，也不需要实现某些奇怪的协议，满足大部分需求只需要少于5行代码。更让人惊喜的是IQKeyboardManager已经提供Swift版本。</p>\n<p>首先下载第三方库源码导入已有项目中(也可以使用CocoaPods), 然后只需要一行代码就可控制自动键盘处理事件在整个项目内是否启用。</p>","slug":"IQKeyboardManager框架详解"},{"title":"程序启动的完成过程","date":"2019-03-28T10:37:14.000Z","excerpt":"<p>程序启动的完整过程:<br>1、先执行main函数，main内部会调用UIApplicationMain函数,该函数的声明如下:<br>int UIApplicationMain(int argc, char argv[], NSString principalClassName, NSString *delegateClassName)。<br>argc、argv:标准main函数的参数，直接传递给UIApplicationMain进行相关处理即可<br>principalClassName:指定应用程序类，该类必须是UIApplication(或子类)。如果为nil,则用UIApplication类作为默认值<br>　　 delegateClassName:指定应用程序类的代理类，该类必须遵守UIApplicationDelegate协议。</p>","slug":"程序启动的完成过程"},{"title":"iOS网易云音乐锁屏界面实现","date":"2019-03-28T10:23:05.000Z","excerpt":"<p>完整的实现思路:</p>\n<p>App如果需要在锁屏界面上显示相关的信息和按钮, 必须先开启远程控制事件(Remote Control Event), 否则锁屏界面只显示滑动解锁.<br>实现锁屏界面信息, 将歌曲的相关信息更新到锁屏界面上<br>实现锁屏界面的事件处理, 在锁屏界面和上拉的快速功能菜单中实现播放控制</p>\n<p>远程控制事件的实现</p>\n<p>在iOS7.1之前, 远程控制事件主要涉及以下三个方法:</p>\n<p>开始接收远程控制事件<br>结束接收远程控制事件<br>触发远程控制事件后的捕获处理<br>官方文档对这三个方法的描述如下, 这里做了简单的翻译.</p>\n<p>开始接收远程控制事件</p>","slug":"iOS网易云音乐锁屏界面实现"},{"title":"获取手机信息","date":"2019-03-28T10:20:16.000Z","excerpt":"<p>iOS的APP的应用开发的过程中，有时为了bug跟踪或者获取用反馈的需要自动收集用户设备、系统信息、应用信息等等，这些信息方便开发者诊断问题，当然这些信息是用户的非隐私信息，是通过开发api可以获取到的。那么通过那些api可以获取这些信息呢，iOS的SDK中提供了UIDevice，NSBundle，NSLocale。</p>","slug":"获取手机信息"},{"title":"关于runtime","date":"2019-03-28T09:59:44.000Z","excerpt":"<h1 id=\"关于runtime\">关于runtime<a href=\"post/关于runtime#关于runtime\"></a></h1><p>1.什么是runtime？</p>\n<pre><code>1&gt; runtime是一套底层的C语言API（包含很多强大实用的C语言数据类型、C语言函数）\n2&gt; 实际上，平时我们编写的OC代码，底层都是基于runtime实现的\n</code></pre><p>也就是说，平时我们编写的OC代码，最终都是转成了底层的runtime代码（C语言代码）</p>\n<p>2.runtime有啥用？</p>\n<pre><code>1&gt; 能动态产生一个类、一个成员变量、一个方法\n2&gt; 能动态修改一个类、一个成员变量、一个方法\n3&gt; 能动态删除一个类、一个成员变量、一个方法\n</code></pre>","slug":"关于runtime"},{"title":"Git详细分析","date":"2019-03-28T07:45:54.000Z","excerpt":"<p>1.git与svn的区别<br>1.1 git的作用 : 源代码管理<br>1.2 为什么要进行源代码管理</p>\n<p>为了方便多人协同开发(多人同时开发时代码整合)<br>为了方便代码备份(标签和分支)<br>1.3 git与svn的区别<br>代码的管理方式不一样<br>版本控制能力 : 提交更新代码<br>svn 集中式的代码管理.版本控制的能力在服务器上.一旦服务器挂掉了,多人开发就受阻<br>git 分布式的代码管理,客户端自己也有版本控制能力,万一服务器挂掉了,多人开发依然可以进行</p>","slug":"Git详细分析"},{"title":"博客转移","date":"2019-03-28T07:26:36.000Z","excerpt":"<p>终于有时间重新搞一下hexo博客了</p>","slug":"博客转移"}]}